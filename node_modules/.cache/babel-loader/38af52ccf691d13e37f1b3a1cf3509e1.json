{"ast":null,"code":"import React, { useState } from 'react';\n\nfunction createInputComponent(_ref) {\n  var multiple = _ref.multiple,\n      accept = _ref.accept;\n  var el = document.createElement('input');\n  el.type = 'file';\n  el.accept = accept;\n  el.multiple = multiple;\n  return el;\n}\n\nvar useFileUpload = function useFileUpload() {\n  var _useState = useState(null),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var userCallback = function userCallback() {};\n\n  var onChange = function onChange(e) {\n    try {\n      var parsedFiles = [];\n      var target = e.target;\n\n      for (var fileIndex in target.files) {\n        if (isNaN(fileIndex)) {\n          continue;\n        }\n\n        var file = target.files[fileIndex];\n        var parsedFile = {\n          source: URL.createObjectURL(file),\n          name: file.name,\n          size: file.size,\n          file: file\n        };\n        parsedFiles.push(parsedFile);\n      }\n\n      target.removeEventListener('change', onChange);\n      target.remove();\n\n      if (target.multiple) {\n        setFiles(parsedFiles);\n        return Promise.resolve(userCallback(parsedFiles));\n      }\n\n      setFiles(parsedFiles[0]);\n      return Promise.resolve(userCallback(parsedFiles[0]));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var uploadFile = function uploadFile(_temp, cb) {\n    var _ref2 = _temp === void 0 ? {\n      accept: '',\n      multiple: false\n    } : _temp,\n        accept = _ref2.accept,\n        multiple = _ref2.multiple;\n\n    if (typeof cb === 'function') {\n      userCallback = cb;\n    }\n\n    var inputEL = createInputComponent({\n      multiple: multiple,\n      accept: accept\n    });\n    inputEL.addEventListener('change', onChange);\n    inputEL.click();\n  };\n\n  return React.useMemo(function () {\n    return [files, uploadFile];\n  }, [files]);\n};\n\nexport { useFileUpload };","map":{"version":3,"sources":["../src/index.js"],"names":["multiple","accept","el","document","useFileUpload","files","setFiles","useState","userCallback","onChange","parsedFiles","target","e","isNaN","file","parsedFile","source","URL","name","size","uploadFile","inputEL","createInputComponent"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n// import styles from './styles.module.css'\n\nfunction createInputComponent({ multiple, accept }) {\n  const el = document.createElement('input')\n  // set input config\n  el.type = 'file'\n  el.accept = accept\n  el.multiple = multiple\n  // return file input element\n  return el\n}\n\nexport const useFileUpload = () => {\n  const [files, setFiles] = useState(null)\n  let userCallback = () => {}\n\n  // Handle onChange event\n  const onChange = async (e) => {\n    const parsedFiles = []\n    const target = e.target\n\n    // Loop through files\n    for (const fileIndex in target.files) {\n      // check if index is a number\n      if (isNaN(fileIndex)) {\n        continue\n      }\n\n      // get file object\n      const file = target.files[fileIndex]\n\n      // select properties\n\n      const parsedFile = {\n        source: URL.createObjectURL(file),\n        name: file.name,\n        size: file.size,\n        file // original file object\n      }\n\n      // add to parsed file list\n      parsedFiles.push(parsedFile)\n    }\n\n    // remove event listener after operation\n    target.removeEventListener('change', onChange)\n\n    // remove input element after operation\n    target.remove()\n\n    // update files state hook\n\n    if (target.multiple) {\n      setFiles(parsedFiles)\n      return userCallback(parsedFiles)\n    }\n\n    setFiles(parsedFiles[0])\n    return userCallback(parsedFiles[0])\n\n    // user specified callback\n  }\n\n  // Handle upload\n  const uploadFile = (\n    { accept, multiple } = { accept: '', multiple: false },\n    cb\n  ) => {\n    if (typeof cb === 'function') {\n      userCallback = cb\n    }\n    // create virtual input element\n    const inputEL = createInputComponent({ multiple, accept })\n    // add event listener\n    inputEL.addEventListener('change', onChange)\n    inputEL.click()\n  }\n\n  return React.useMemo(() => [files, uploadFile], [files])\n}\n"]},"metadata":{},"sourceType":"module"}