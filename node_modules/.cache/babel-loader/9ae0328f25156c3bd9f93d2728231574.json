{"ast":null,"code":"var _jsxFileName = \"/home/yamid/Documentos/ReactJS/puntogov/src/components/Cards/Prueba/formulario-formik-demo.js\";\nimport './formik-demo.css';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport classnames from 'classnames';\nconst formikEnhancer = withFormik({\n  validationSchema: Yup.object().shape({\n    firstName: Yup.string().min(2, \"C'mon, your name is longer than that\").required('First name is required.'),\n    lastName: Yup.string().min(2, \"C'mon, your name is longer than that\").required('Last name is required.'),\n    email: Yup.string().email('Invalid email address').required('Email is required!')\n  }),\n  mapPropsToValues: _ref => {\n    let {\n      user\n    } = _ref;\n    return { ...user\n    };\n  },\n  handleSubmit: (payload, _ref2) => {\n    let {\n      setSubmitting\n    } = _ref2;\n    alert(payload.email);\n    setSubmitting(false);\n  },\n  displayName: 'MyForm'\n});\n\nconst InputFeedback = _ref3 => {\n  let {\n    error\n  } = _ref3;\n  return error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, error) : null;\n};\n\nconst Label = _ref4 => {\n  let {\n    error,\n    className,\n    children,\n    ...props\n  } = _ref4;\n  return /*#__PURE__*/React.createElement(\"label\", Object.assign({\n    className: \"label\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nconst TextInput = _ref5 => {\n  let {\n    type,\n    id,\n    label,\n    error,\n    value,\n    onChange,\n    className,\n    ...props\n  } = _ref5;\n  const classes = classnames('input-group', {\n    'animated shake error': !!error\n  }, className);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: id,\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    id: id,\n    className: \"text-input\",\n    type: type,\n    value: value,\n    onChange: onChange\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(InputFeedback, {\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst MyForm = props => {\n  const {\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    isSubmitting\n  } = props;\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    id: \"firstName\",\n    type: \"text\",\n    label: \"First Name\",\n    placeholder: \"John\",\n    error: touched.firstName && errors.firstName,\n    value: values.firstName,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextInput, {\n    id: \"lastName\",\n    type: \"text\",\n    label: \"Last Name\",\n    placeholder: \"Doe\",\n    error: touched.lastName && errors.lastName,\n    value: values.lastName,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextInput, {\n    id: \"email\",\n    type: \"email\",\n    label: \"Email\",\n    placeholder: \"Enter your email\",\n    error: touched.email && errors.email,\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"outline\",\n    onClick: handleReset,\n    disabled: !dirty || isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(DisplayFormikState, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  })));\n};\n\nconst MyEnhancedForm = formikEnhancer(MyForm); // Helper for the demo\n\nimport { MoreResources, DisplayFormikState } from './formik-demo';\nexport default function ole() {\n  /*#__PURE__*/\n  React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, \"Building input primitives with\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/jaredpalmer/formik\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, \"Formik\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, \"Formik's enables you to quickly build and style your own reusable form-related components extremely quickly.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, \"This example does just that. It demonstrates a custom text input, label, and form feedback components as well as a cool shake animation that's triggered if a field is invalid.\"), /*#__PURE__*/React.createElement(MyEnhancedForm, {\n    user: {\n      email: '',\n      firstName: '',\n      lastName: ''\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(MoreResources, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }));\n}\n;","map":{"version":3,"sources":["/home/yamid/Documentos/ReactJS/puntogov/src/components/Cards/Prueba/formulario-formik-demo.js"],"names":["React","render","withFormik","Yup","classnames","formikEnhancer","validationSchema","object","shape","firstName","string","min","required","lastName","email","mapPropsToValues","user","handleSubmit","payload","setSubmitting","alert","displayName","InputFeedback","error","Label","className","children","props","TextInput","type","id","label","value","onChange","classes","MyForm","values","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","MyEnhancedForm","MoreResources","DisplayFormikState","ole"],"mappings":"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","sourcesContent":["import './formik-demo.css';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport classnames from 'classnames';\n\nconst formikEnhancer = withFormik({\n  validationSchema: Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, \"C'mon, your name is longer than that\")\n      .required('First name is required.'),\n    lastName: Yup.string()\n      .min(2, \"C'mon, your name is longer than that\")\n      .required('Last name is required.'),\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('Email is required!'),\n  }),\n\n  mapPropsToValues: ({ user }) => ({\n    ...user,\n  }),\n  handleSubmit: (payload, { setSubmitting }) => {\n    alert(payload.email);\n    setSubmitting(false);\n  },\n  displayName: 'MyForm',\n});\n\nconst InputFeedback = ({ error }) =>\n  error ? <div className=\"input-feedback\">{error}</div> : null;\n\nconst Label = ({ error, className, children, ...props }) => {\n  return (\n    <label className=\"label\" {...props}>\n      {children}\n    </label>\n  );\n};\n\nconst TextInput = ({ type, id, label, error, value, onChange, className, ...props }) => {\n  const classes = classnames(\n    'input-group',\n    {\n      'animated shake error': !!error,\n    },\n    className\n  );\n  return (\n    <div className={classes}>\n      <Label htmlFor={id} error={error}>\n        {label}\n      </Label>\n      <input\n        id={id}\n        className=\"text-input\"\n        type={type}\n        value={value}\n        onChange={onChange}\n        {...props}\n      />\n      <InputFeedback error={error} />\n    </div>\n  );\n};\nconst MyForm = props => {\n  const {\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    isSubmitting,\n  } = props;\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextInput\n        id=\"firstName\"\n        type=\"text\"\n        label=\"First Name\"\n        placeholder=\"John\"\n        error={touched.firstName && errors.firstName}\n        value={values.firstName}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      />\n      <TextInput\n        id=\"lastName\"\n        type=\"text\"\n        label=\"Last Name\"\n        placeholder=\"Doe\"\n        error={touched.lastName && errors.lastName}\n        value={values.lastName}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      />\n      <TextInput\n        id=\"email\"\n        type=\"email\"\n        label=\"Email\"\n        placeholder=\"Enter your email\"\n        error={touched.email && errors.email}\n        value={values.email}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      />\n      <button\n        type=\"button\"\n        className=\"outline\"\n        onClick={handleReset}\n        disabled={!dirty || isSubmitting}\n      >\n        Reset\n      </button>\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n      <DisplayFormikState {...props} />\n    </form>\n  );\n};\n\nconst MyEnhancedForm = formikEnhancer(MyForm);\n\n// Helper for the demo\nimport { MoreResources, DisplayFormikState } from './formik-demo';\n\n\nexport default function ole() {\n  <div className=\"app\">\n    <h1>\n      Building input primitives with{' '}\n      <a href=\"https://github.com/jaredpalmer/formik\">Formik</a>\n    </h1>\n    <p>\n      Formik's enables you to quickly build and style your own reusable form-related\n      components extremely quickly.\n    </p>\n    <p>\n      This example does just that. It demonstrates a custom text input, label, and form\n      feedback components as well as a cool shake animation that's triggered if a field is\n      invalid.\n    </p>\n\n    <MyEnhancedForm user={{ email: '', firstName: '', lastName: '' }} />\n    <MoreResources />\n  </div>\n};\n"]},"metadata":{},"sourceType":"module"}